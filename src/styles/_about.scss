#about {
  position:relative;
  padding-left:100px;
  padding-right:100px;
  padding-top: 20px;
  padding-bottom: 20px;
  font-size: 120%;
  background-color: white;
  width: 90%;
  margin: 0 auto;
  max-width: 960px;
  @media only screen and (min-width: $cut) {
    width: 80%;
  }
  svg {
    width: 60px !important;
    height: auto;
  }

  & .icon {
    width: 60px !important;
    height: auto;
  }

  min-height: 100vh;

  &:after {
    content: "";
    position: absolute;
    width: 100vw;
    height:100%;
    top:0;
    left:50%;
    display:block;
    z-index:-1;
    transform: translateX(-50%);
    background-image: url(https://cdnb.artstation.com/p/assets/images/images/011/452/797/4k/mark-castanon-caldera-glacierdistrict-entrance-mc-01-001.jpg?1529651210);
    opacity:0;
    transition-duration:1s;
  }
  
  &.first:after {
    opacity: 1
  }
  &.second:after {
    opacity: 0
  }

  &:before {
    content: "";
    position: absolute;
    width: 100vw;
    height:100%;
    top:0;
    left:50%;
    display:block;
    z-index:-1;
    transform: translateX(-50%);
    background-image: url(https://wallpapercave.com/wp/wp4578872.jpg);
  }
}

.my-skills-title {
  text-align: center;
  margin: 5px auto;
  h1 {
    font-weight: 400;
  }
}

.tech {
  margin: 10px;
  flex: 1 1 0;
  h2, h3 {
    font-weight: 400;
  }
}

.user {
  text-align: center;
  font-size: 60px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  p {
    font-size: 16px;
  }
  @media only screen and (min-width: $cut) {
    flex-wrap: nowrap;
    font-size: 75px;
  }
}

.user-details {
  text-align: center;
  margin: 5px 0 5px 0 auto;
  h1 {
    font-weight: 400;
  }
}

.code-games 
{
  font-family: 'montserrat', monospace;
  font-size: 30px;
  font-weight: bold;
  margin-top: 0;
  display: inline-block;
}

.design-games {
  font-family: 'Kaushan Script', cursive;
  font-size: 30px;
  font-weight: bold;
}

.rainbow-text {
  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

//CODE ANIMATION

@mixin glitchCopy { 
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
position: relative;
color: black;
letter-spacing: .2em;
/* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
animation: glitch-skew 1s infinite linear alternate-reverse;

// Creates a copy before our text. 
&::before{
  // Duplicates our text with the mixin.
  @include glitchCopy;
  // Scoots text slightly to the left for the color offset.
  left: 2px;
  // Creates the color 'shadow' that happens on the glitch.
  text-shadow: -2px 0 #ff00c1;
  /* Creates an initial clip for our glitch. This works in
  a typical top,right,bottom,left fashion and creates a mask
  to only show a certain part of the glitch at a time. */
  clip: rect(44px, 450px, 56px, 0);
  /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
  with an alternating animation to keep things fresh. */
  animation: glitch-anim 5s infinite linear alternate-reverse;
}

// Creates a copy after our text. Note comments from ::before.
&::after {
  @include glitchCopy;
  left: -2px;
  text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
  animation: glitch-anim2 1s infinite linear alternate-reverse;
}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    transform: skew((random(10) - 5) + deg);
  }
}
}